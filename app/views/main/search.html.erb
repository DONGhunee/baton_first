
    <style>
        footer {
          display: none;
        }
        @media (min-width: 993px) {
          h3 {
              margin-top: 140px;
              margin-left:5%;
          }
          .search_place {
              margin-top: 40px;
              width: 95%;
              height: 70px;
              margin-left:5%;
          }
          .search_menu {
              float: left;
              width:350px;
              margin-left:5%;
          }
          .search_map {
              float:right;
              width:55%;
              margin-right:5%;
          }
          #map {
               width:100%;
               height:500px;
          }
          .search_image_class {
            float:left;
            width:50%;
            padding-bottom: 15px;
          }
          .search_content_class {
            float:right;
            width:50%;
            padding-bottom: 15px;
          }
          hr {
            clear:both;
          }
          #search_image {
             height:120px;
             width:150px;
          }
        }
        
        @media (max-width: 992px) {
          h3 {
              margin-top: 90px;
              margin-left:5%;
          }
          .search_place {
              position:absolute;
              top: 160px;
              width: 95%;
              padding-bottom: 10px;
              margin-left:5%;
          }
          .search_map {
              position:absolute;
              top:220px;
              width:94%;
              margin-left:3%;
          }
          #map {
              width:100%;
              height:400px;
          }
          .search_menu {
              position:absolute;
              top:230px;
              left:8%;
              bottom:0;
              width:250px;
              padding:8px;
              overflow-y:auto;
              background:rgba(255, 255, 255, 0.7);
              z-index: 1000;
              font-size:12px;
              border-radius: 10px;
          }
          #search_image {
               display: none;
          }
        }
        
@import url(https://fonts.googleapis.com/css?family=Open+Sans:600,400);


.marker {
  position: absolute;
  z-index: 5;
  top: 151px;
  left: 176px;
  font-size: 0;
  cursor: pointer;
  -webkit-transform: perspective(600px) rotateY(0deg);
          transform: perspective(600px) rotateY(0deg);
  opacity: 1;
  transition: all .5s ease .4s;
}
.marker.inactive {
  -webkit-transform: perspective(600px) rotateY(-90deg);
          transform: perspective(600px) rotateY(-90deg);
  opacity: 0;
  transition: all .5s ease;
}
.marker svg {
  fill: pink;
  -webkit-animation: hovering 1s ease-in-out infinite alternate;
          animation: hovering 1s ease-in-out infinite alternate;
}
.marker .shadow {
  width: 18px;
  height: 4px;
  background: linear-gradient(45deg, rgba(59,173,227,0.5) 0%, rgba(87,111,230,0.5) 25%, rgba(152,68,183,0.5) 51%, rgba(255,53,127,0.5) 100%);
  border-radius: 50%;
  margin: 5px auto 0 auto;
  -webkit-animation: shadow 1s ease-in-out infinite alternate;
          animation: shadow 1s ease-in-out infinite alternate;
}

.card {
  position: absolute;
  z-index: 10;
  width: 240px;
  height: 320px;
  top: 105px;
  left: 80px;
  border-radius: 3px;
  overflow: hidden;
  background: #fff;
  box-shadow: 4px 8px 12px 0 rgba(0, 0, 0, 0.2);
  text-align: center;
  -webkit-transform: perspective(600px) rotateY(90deg);
          transform: perspective(600px) rotateY(90deg);
  opacity: 0;
  pointer-events: none;
  transition: all .5s ease;
}
.card.active {
  -webkit-transform: perspective(600px) rotateY(0deg);
          transform: perspective(600px) rotateY(0deg);
  opacity: 1;
  pointer-events: all;
  transition: all .5s ease .4s;
}
.card img {
  margin-bottom: 18px;
}
.card p {
  font-weight: 400;
  font-size: 12px;
  line-height: 17px;
  margin: 2px 0;
}
.card p.name {
  font-size: 14px;
  line-height: 19px;
  font-weight: 600;
}
.card .actions {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 40px;
}
.card .actions a {
  float: left;
  width: 50%;
  text-align: center;
  line-height: 40px;
  text-decoration: none;
  color: pink;
  font-weight: 400;
  font-size: 12px;
}
.card .actions .divide {
  position: absolute;
  width: 1px;
  height: 20px;
  left: 50%;
  top: 10px;
  background: pink;
}

@-webkit-keyframes hovering {
  from {
    -webkit-transform: translate3d(0, 0, 0);
            transform: translate3d(0, 0, 0);
  }
  to {
    -webkit-transform: translate3d(0, -5px, 0);
            transform: translate3d(0, -5px, 0);
  }
}

@keyframes hovering {
  from {
    -webkit-transform: translate3d(0, 0, 0);
            transform: translate3d(0, 0, 0);
  }
  to {
    -webkit-transform: translate3d(0, -5px, 0);
            transform: translate3d(0, -5px, 0);
  }
}
@-webkit-keyframes shadow {
  from {
    -webkit-transform: scale(1) translate3d(0, 0, 0);
            transform: scale(1) translate3d(0, 0, 0);
  }
  to {
    -webkit-transform: scale(1.25) translate3d(0, 0, 0);
            transform: scale(1.25) translate3d(0, 0, 0);
  }
}
@keyframes shadow {
  from {
    -webkit-transform: scale(1) translate3d(0, 0, 0);
            transform: scale(1) translate3d(0, 0, 0);
  }
  to {
    -webkit-transform: scale(1.25) translate3d(0, 0, 0);
            transform: scale(1.25) translate3d(0, 0, 0);
  }
}


    </style>
 
    <h3>내 주변 양도권을 찾아보세요!</h3>
    <div class="search_place">
      <!--검색 기능-->
      <form>
        <div class="ui action input">
          <% if @something.blank? %>
            <input type="text" placeholder="헬스장을 검색하세요." name="place_search">
          <!--검색 했을때-->
          <% else %>
            <input type="text" placeholder="헬스장을 검색하세요." value="<%= @something %>" name="place_search">
          <% end %>
            <button class="ui icon button" type="submit">
              <i class="search icon"></i>
            </button>
        </div>
      </form>
    </div>
    
    <div class="big_div" style="padding:10px;">
          <div class="search_menu" onmouseover="setCursor(this,'pointer')" style="padding:10px;">
            <% if @something.blank? | @search.blank? %>
               
              <% @all.each do |x| %>
                  <% if x.image.present? %>
                    <div onclick="move_yang(<%= x.id %>);">
                        <div class="search_image_class">
                          <img src="<%= x.image.url %>" id="search_image">
                        </div>
                        <div class="search_content_class">
                          <h6><%= x.title %></h6>
                          <%= x.location %>
                        </div>
                    </div>
                  <% else %>
                    <div onclick="move_yang(<%= x.id %>);">
                        <div
                          <h6><%= x.title %></h6>
                        </div>
                        <div>
                          <%= x.location %>
                        </div>
                    </div>
                  <% end %>
                  <hr>
              <% end %>
              <%#= paginate @all %>
            <% else %>
              <% @search_all.each do |x| %>
                  <% if x.image.present? %>
                    <div onclick="move_yang(<%= x.id %>);">
                        <div class="search_image_class">
                          <img src="<%= x.image.url %>" id="search_image">
                        </div>
                        <div class="search_content_class">
                          <h6><%= x.title %></h6>
                          <%= x.location %>
                        </div>
                    </div>
                  
                  <% else %>
                  <div id="tttt" >
                    <div onclick="move_yang(<%= x.id %>);">
                        <div>
                          <h6><%= x.title %></h6>
                        </div>
                        <div>
                          <%= x.location %>
                        </div>
                    </div>
                  </div>
                  <% end %>
                  <hr>
              <% end %>
              <%#= paginate @search_all %>
            <% end %>
          </div>
          
          <div class="search_map">
            <!--지도 보여주기-->
            <div id="map"></div>
          </div>
    </div>
  
  <script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=89103331b15d2e3a80bf08dde5b8ecae"></script>
  <script>
//검색 결과가 없을때 - 현재 위치 보여주기
    <% if @something.blank? | @search.blank? %>
      <% if @search.blank? %>
        alert("검색 결과가 없습니다.");
      <% end %>
      if (navigator.geolocation) { // GPS를 지원하면
          navigator.geolocation.getCurrentPosition(function(position) {
          
          var mapContainer = document.getElementById('map'); //지도를 담을 영역의 DOM 레퍼런스
          var mapOption = { //지도를 생성할 때 필요한 기본 옵션
              center: new daum.maps.LatLng(position.coords.latitude, position.coords.longitude), //지도의 중심좌표.
              level: 3 //지도의 레벨(확대, 축소 정도)
          };
          
          var map = new daum.maps.Map(mapContainer, mapOption); // 지도를 생성합니다
          
          // 마커가 표시될 위치입니다
          var markerPosition  = new daum.maps.LatLng(position.coords.latitude, position.coords.longitude);
          
          // 마커를 생성합니다
          var marker = new daum.maps.Marker({
            position: markerPosition
          });
          
          // 마커가 지도 위에 표시되도록 설정합니다
          marker.setMap(map);
          
          // 마커를 클릭했을 때 마커 위에 표시할 인포윈도우를 생성합니다
          var iwContent = '<div style="padding:5px;">현재 위치</div>', // 인포윈도우에 표출될 내용으로 HTML 문자열이나 document element가 가능합니다
            iwRemoveable = false; // removeable 속성을 ture 로 설정하면 인포윈도우를 닫을 수 있는 x버튼이 표시됩니다
          
          // 인포윈도우를 생성합니다
          var infowindow = new daum.maps.InfoWindow({
            content : iwContent,
            removable : iwRemoveable
          });
          
          infowindow.open(map, marker);
          
          
          //   모든 위치 표시하기
          // 마커를 표시할 위치와 title 객체 배열입니다 
          var positions = [
            <% @all.each do |x| %>
                {
                    <% if x.lat.present? %>
                        position_id: '<%= x.id %>',
                        title: '<%= x.title %>',
                        latlng: new daum.maps.LatLng('<%= x.lat %>', '<%= x.lng %>')
                    <% end %>
                },
            <% end %>
          ];
          
          // 마커 이미지의 이미지 주소입니다
          var imageSrc = "http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png"; 
          
          for (var i = 0; i < positions.length; i++) {
            // 마커 이미지의 이미지 크기 입니다
            var imageSize = new daum.maps.Size(24, 35); 

            // 마커 이미지를 생성합니다    
            var markerImage = new daum.maps.MarkerImage(imageSrc, imageSize); 
            
            // 마커를 생성합니다
            if(positions[i].position_id){
              var all_marker = new daum.maps.Marker({
                  map: map, // 마커를 표시할 지도
                  position: positions[i].latlng, // 마커를 표시할 위치
                  title: positions[i].title, // 마커의 타이틀, 마커에 마우스를 올리면 타이틀이 표시됩니다
                  image: markerImage // 마커 이미지 
              });
              
              // 마커의 인포 윈도우
              (function(marker, title, position_id) {
                  
                  daum.maps.event.addListener(marker, 'mouseover', function() {
                      displayInfowindow(marker, title);
                  });
      
                  daum.maps.event.addListener(marker, 'mouseout', function() {
                      infowindow.close();
                  });
                  
                  daum.maps.event.addListener(marker, 'click', function() {
                      move_yang(position_id);
                  });
                  
              })(all_marker, positions[i].title, positions[i].position_id);
            }
          };
          
          function displayInfowindow(marker, title) {
              var content = '<div style="padding:5px;z-index:1;">' + title + '</div>';
        
              infowindow.setContent(content);
              infowindow.open(map, marker);
          }
          
          }, function(error) {
          console.error(error);
          }, {
                enableHighAccuracy: false,
                maximumAge: 0,
                timeout: Infinity
              });
          }
      else {
          alert('GPS를 지원하지 않습니다');
      }
//위치 정보가 없을때
    <% elsif @search.lat.blank? %>
      alert("위치 정보가 없습니다.");
//검색 결과가 있을때
    <% else %>
      var markers = [];
      
      var mapContainer = document.getElementById('map'), // 지도를 표시할 div
          mapOption = { 
             center: new daum.maps.LatLng('<%= @search.lat %>', '<%= @search.lng %>'), // 지도의 중심좌표
             level: 3 // 지도의 확대 레벨
          };
         
      var map = new daum.maps.Map(mapContainer, mapOption); // 지도를 생성합니다
      
      // 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다
      var infowindow = new daum.maps.InfoWindow({zIndex:1});
      //검색한 장소들의 배열 생성
      var places = [
          <% @search_all.each do |x| %>
              {
                  place_id: '<%= x.id %>',
                  lat: '<%= x.lat %>',
                  lng: '<%= x.lng %>',
                  place_name: '<%= x.title %>',
                  road_address_name: '<%= x.location %>'
              },
          <% end %>
          ];
            
      displayPlaces(places);
      // displayMenu(places);
      // displayPagination(pagination);
            
          // 검색 결과 목록과 마커를 표출하는 함수입니다
            function displayPlaces(places) {

                // var listEl = document.getElementById('placesList'),
                // menuEl = document.getElementById('menu_wrap'),
                    // fragment = document.createDocumentFragment();
                var bounds = new daum.maps.LatLngBounds();
                // listStr = '';
                
                // 검색 결과 목록에 추가된 항목들을 제거합니다
                // removeAllChildNods(listEl);
            
                // 지도에 표시되고 있는 마커를 제거합니다
                removeMarker();
                
                for ( var i=0; i<places.length; i++ ) {
                    // 마커를 생성하고 지도에 표시합니다
                    var placePosition = new daum.maps.LatLng(places[i].lat, places[i].lng),
                        marker = addMarker(placePosition, i);
                        // itemEl = getListItem(i, places[i]); // 검색 결과 항목 Element를 생성합니다
                        
                    // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해
                    // LatLngBounds 객체에 좌표를 추가합니다
                    bounds.extend(placePosition);
            
                    // 마커와 검색결과 항목에 mouseover 했을때
                    // 해당 장소에 인포윈도우에 장소명을 표시합니다
                    // mouseout 했을 때는 인포윈도우를 닫습니다
                    (function(marker, title, place_id) {
                        daum.maps.event.addListener(marker, 'mouseover', function() {
                            displayInfowindow(marker, title);
                        });
            
                        daum.maps.event.addListener(marker, 'mouseout', function() {
                            infowindow.close();
                        });
                        
                        daum.maps.event.addListener(marker, 'click', function() {
                            move_yang(place_id);
                        });
                      
                        // itemEl.onmouseover =  function () {
                        //     displayInfowindow(marker, title);
                        // };
            
                        // itemEl.onmouseout =  function () {
                        //     infowindow.close();
                        // };
                        
                        
                    })(marker, places[i].place_name, places[i].place_id);
                
                    // fragment.appendChild(itemEl);
                }
            
                // 검색결과 항목들을 검색결과 목록 Elemnet에 추가합니다
                // listEl.appendChild(fragment);
                // menuEl.scrollTop = 0;
            
                // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다
                map.setBounds(bounds);
            }
            
            // 검색결과 항목을 Element로 반환하는 함수입니다
            function getListItem(index, places) {
            
                var el = document.createElement('li'),
                itemStr = '<span class="markerbg marker_' + (index+1) + '"></span>' +
                            '<div class="info">' +
                            '   <h5>' + places.place_name + '</h5>';
                            
                itemStr += '    <span>' + places.road_address_name + '</span>';
            
                // el.innerHTML = itemStr;
                el.className = 'item';
            
                return el;
            }  
////////////메뉴 마우스오버 이벤트            
            // function teste() {
            // }
            
            // function displayMenu(places) {
            //   alert(places.length);
            // }
/////////////////////////            
            
            // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다
            function addMarker(position, idx, title) {
                var imageSrc = 'http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다
                    imageSize = new daum.maps.Size(24, 35),  // 마커 이미지의 크기
                    
                    markerImage = new daum.maps.MarkerImage(imageSrc, imageSize),
                        marker = new daum.maps.Marker({
                        position: position, // 마커의 위치
                        image: markerImage 
                    });
            
                marker.setMap(map); // 지도 위에 마커를 표출합니다
                markers.push(marker);  // 배열에 생성된 마커를 추가합니다
            
                return marker;
            }
            
            // 지도 위에 표시되고 있는 마커를 모두 제거합니다
            function removeMarker() {
                for ( var i = 0; i < markers.length; i++ ) {
                    markers[i].setMap(null);
                }   
                markers = [];
            }
    <% end %>
  </script>
  <script>
    // 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다
    // 인포윈도우에 장소명을 표시합니다
    function displayInfowindow(marker, title) {
        var content = '<div style="padding:5px;z-index:1;">' + title + '</div>';
    
        infowindow.setContent(content);
        infowindow.open(map, marker);
    }
    
    // 커서 바꿔주는 스크립트
    function setCursor(str,str2){
        str.style.cursor = str2;
    }
    
    // 메뉴 클릭시 상세페이지 이동
    function move_yang(id) {
      location.href='/posts/' + id;
    }
    
  </script>
  

