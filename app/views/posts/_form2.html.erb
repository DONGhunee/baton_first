   
    <style>
    .date-input {     
    width: 145px;
    padding-top: 0px;
    }​


        .search_category {
            margin-top: 100px;
            width: 100%;
            height: 70px;
            padding: 10px;
        }
        .search_detail {
            width: 100%;
            height: 750px;
        }
        #n_1 {
            border: 1px solid black;
        }
        #search_input {
            margin-left: 20px;
        }
        #segment_content {
            margin-left: 20px;
        }
        
         @media (max-width:992px){
            .tt .typo p{
                 font-size:45px; 
             }
             .tt{
                 margin-left:5%;
                 margin-right:5%;
             }
             .container{
                 max-width:100%;
                 width:100%;
                 margin-left:0;
                 margin-right:0;
             }
             
             #e1{
                 width:100%;
             }
         }
         
         @media (min-width:993px){
             
           .tt .typo p{
                 font-size:65px; 
             }
             .tt{
                 margin-left:15%;
                 margin-right:15%;

             }
             #e1{
                 position:relative; 
                 left:50px; bottom:25px;
             }
         }
    </style>
<% @edit = Post.where(:id => params[:id]) %>
<% @edit.each do |x| %>

<%= form_for(@post) do |f| %>
  <% if @post.errors.any? %>
    <div id="error_explanation">
      <h2><%= pluralize(@post.errors.count, "error") %> prohibited this post from being saved:</h2>

      <ul>
      <% @post.errors.full_messages.each do |message| %>
        <li><%= message %></li>
      <% end %>
      </ul>
    </div>
  <% end %>

<div class="container">
    <div class="tt">
        <div class="typo">
         <p style="font-weight:light; color:dark gray; line-height:-50%;" > <strong>게시물</strong>을 <br>등록해보세요 !</p>
         </div>
            <br><br><br>
    <div class="ui form">
    <div class="field">
    <select class="ui search dropdown" name="type"style="width:70%;">
      
      <option value="헬스장">헬스장</option>
      <option value="요가">요가</option>
      <option value="필라테스트">필라테스</option>
      <option value="복싱"> 복싱</option>
      <option value="에어로빅">에어로빅</option>
      <option value="개인PT">개인PT</option>
      <option value="기타">기타</option>
      </select><br></div>
  </div>

    
  


<div class="ui input">
<input type="text" name="title" autocomplete="off" placeholder="시설의 이름을 입력해주세요" role="textbox" style="width:250px; height:35px;" required="" value=<%= x.title %>>
</div>
<br>
<br>



<div class="ui action input">
    <input type="text" id="keyword" autocomplete="off" placeholder="시설의 위치를 입력해주세요" role="textbox" style="width:210px; height:35px;" onkeypress="if(event.keyCode==13) {searchPlaces(); clicking(); return false;}" >              


    <button class="ui icon button" type="button" onclick="searchPlaces(); clicking();">
      <i class="search icon"></i>
    </button>
</div>
<br><br>
<div class="ui input">
    <input type="text" id="demo" name="location" autocomplete="off" value="<%= x.location %>"  placeholder="위치 표시하는 곳" role="textbox" style="width:250px; height:35px;" required="" readonly >
    <input type="hidden" id="demo_lat" name="lat"></input> 
    <input type="hidden" id="demo_lng" name="lng"></input>
</div>
<br><br>

<div id="map" style="width:100%; height: 400px;"></div>

<br><br>

<div class='ui form'>
  <textarea name="content" placeholder='시설 정보를 입력해주세요' rows='8' style='resize:none' ><%= x.content %></textarea>
</div><br><br><br><br>

    <div>
        <p style="font-size:30px; font-weight:light; color:dark gray; line-height:-50%;" > 
        <strong>시설의 이미지</strong>를 <br>업로드해보세요 !
        </p>
      
        <input type="file"  id="image2" name="image2" accept="image/png,image/gif,image/jpeg"> 
    
     
      
        <% f.file_field :image, accept: 'image/png,image/gif,image/jpeg' %>

    </div>
          
<div class="ui form"> <br><br>
   

  <div class="two fields">
    <div class="field">
      <label>전화번호를 입력해주세요</label>
      <input name="tel" type="tel" id="cellPhone"
     placeholder="010-1234-5678"  required="true"  value=<%= x.tel %>></input>
    </div>
    <div class="field">
      <label>양도금액을 입력해주세요</label>
      <input name="money" type="text"  placeholder="10,000" id="trecycle_result_am" value=<%= x.money %> />
    </div>
  </div>
</div>
 
<br>
<div class="ui form">
  <div class="two fields">
    <div class="field">
      <label>양도 시작일</label>
      <input type="date" name="sday" max="2020-12-31" value="<%= x.sday %>">
    </div>
    <div class="field">
      <label>헬스장 사용가능 기한</label>
      <input type="date" name="eday" min="2017-01-02" value="<%= x.eday %>">
    </div>
  </div>
</div>



    <br><br><br><br>
 

                <script>
                function autoHypenPhone(str){
            str = str.replace(/[^0-9]/g, '');
            var tmp = '';
            if( str.length < 4){
                return str;
            }else if(str.length < 7){
                tmp += str.substr(0, 3);
                tmp += '-';
                tmp += str.substr(3);
                return tmp;
            }else if(str.length < 11){
                tmp += str.substr(0, 3);
                tmp += '-';
                tmp += str.substr(3, 3);
                tmp += '-';
                tmp += str.substr(6);
                return tmp;
            }else{              
                tmp += str.substr(0, 3);
                tmp += '-';
                tmp += str.substr(3, 4);
                tmp += '-';
                tmp += str.substr(7);
                return tmp;
            }
            return str;
        }

            var cellPhone = document.getElementById('cellPhone');
            cellPhone.onkeyup = function(event){
        event = event || window.event;
            var _val = this.value.trim();
            this.value = autoHypenPhone(_val) ;
            }
                    function inputNumberFormat(obj) { 
                    obj.value = comma(uncomma(obj.value)); 
                } 
                
                function comma(str) { 
                    str = String(str); 
                    return str.replace(/(\d)(?=(?:\d{3})+(?!\d))/g, '$1,'); 
                } 
                
                function uncomma(str) { 
                    str = String(str); 
                    return str.replace(/[^\d]+/g, ''); 
                }
                </script>




            <p style="font-size:30px; font-weight:light; color:dark gray; line-height:-50%;" > 
            시설에서 이용가능한<br> <strong>편의시설</strong>을<br>체크해보세요 </p><br>



<div class="ui slider checkbox">
        <input type="checkbox" name="f_wifi">
        <label>와이파이</label></div><br>
        
<div class="ui slider checkbox">
 <input type="checkbox" name="f_shower">
        <label>샤워시설</label></div><br>      
        
<div class="ui slider checkbox">
 <input type="checkbox" name="f_parking">
        <label>건물 내 무료주차</label> </div><br>
        
        <div class="ui slider checkbox">
<input type="checkbox" name="f_clothes">
        <label>운동복 제공</label></div><br>

  <div class="ui slider checkbox">
<input type="checkbox" name="f_rocker">
        <label>라커</label> </div><br>
        
        
        


<br><br><br><br>

  <input type='submit' value="등록하기" class="ui secondary button"></input>

  <input type='reset' value="다시 작성하기" class="ui button"></input>

    
    
    
<br><br><br><br>
 </div>
</div>
  
  
  
<% end %>
<% end %>


 <br><br>

<script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=b5a7ee0065f76f4f7ae106a301a8fa9c&libraries=services"></script>


<script>
    // 마커를 담을 배열입니다
    var markers = [];
    
    var mapContainer = document.getElementById('map'), // 지도를 표시할 div 
        mapOption = {
            center: new daum.maps.LatLng(37.241347, 131.867064), // 지도의 중심좌표
            level: 3 // 지도의 확대 레벨
        };  
    
    // 지도를 생성합니다    
    var map = new daum.maps.Map(mapContainer, mapOption);
    
    // 장소 검색 객체를 생성합니다
    var ps = new daum.maps.services.Places();  
    
    // 검색 결과 목록이나 마커를 클릭했을 때 장소명을 표출할 인포윈도우를 생성합니다
    var infowindow = new daum.maps.InfoWindow({zIndex:1});
    
    // 키워드로 장소를 검색합니다
    searchPlaces();
    
    var check;
    function press(f){ 
        
        if(f.keyCode == 13){ 
        
        clicking();
        return searchPlaces();
        
    } }


    function clicking() {
        check = 1;
        return check;
    }
    // 키워드 검색을 요청하는 함수입니다
    function searchPlaces() {
        var keyword = document.getElementById('keyword').value;
        
        if ((check==1)&(!keyword.replace(/^\s+|\s+$/g, ''))) {
            alert('키워드를 입력해주세요!');
            check = 0;
            return false;
        }

        // 장소검색 객체를 통해 키워드로 장소검색을 요청합니다
        ps.keywordSearch( keyword, placesSearchCB); 
    }
    
    // 장소검색이 완료됐을 때 호출되는 콜백함수 입니다
    function placesSearchCB(data, status, pagination) {
        if (status === daum.maps.services.Status.OK) {
    
            // 정상적으로 검색이 완료됐으면
            // 검색 목록과 마커를 표출합니다
            displayPlaces(data);

        } else if (status === daum.maps.services.Status.ZERO_RESULT) {
    
            alert('검색 결과가 존재하지 않습니다.');
            return;
    
        } else if (status === daum.maps.services.Status.ERROR) {
    
            alert('검색 결과 중 오류가 발생했습니다.');
            return;
    
        }
    }
    marker.setClickable(true)
    // 검색 결과 목록과 마커를 표출하는 함수입니다
    function displayPlaces(places) {
        var bounds = new daum.maps.LatLngBounds()
    
        // 지도에 표시되고 있는 마커를 제거합니다
        removeMarker();
        
        for ( var i=0; i<places.length; i++ ) {
    
            // 마커를 생성하고 지도에 표시합니다
            var placePosition = new daum.maps.LatLng(places[i].y, places[i].x),
                marker = addMarker(placePosition, i);
    
            // 검색된 장소 위치를 기준으로 지도 범위를 재설정하기위해
            // LatLngBounds 객체에 좌표를 추가합니다
            bounds.extend(placePosition);
    
            // 마커와 검색결과 항목에 mouseover 했을때
            // 해당 장소에 인포윈도우에 장소명을 표시합니다
            // mouseout 했을 때는 인포윈도우를 닫습니다
            (function(marker, title, location, location2) {
                daum.maps.event.addListener(marker, 'mouseover', function() {
                    displayInfowindow(marker, title);
                });
                
                daum.maps.event.addListener(marker, 'mouseout', function() {
                    infowindow.close();
                });
                
                daum.maps.event.addListener(marker, 'click', function() {
                    getLocation(location, location2);
                });
    
               
            })(marker, places[i].place_name, places[i].road_address_name, places[i].address_name);
    
        }
    
        // 검색된 장소 위치를 기준으로 지도 범위를 재설정합니다
        map.setBounds(bounds);
    }
    
    // 마커를 생성하고 지도 위에 마커를 표시하는 함수입니다
    function addMarker(position, idx, title) {
        var imageSrc = 'http://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_number_blue.png', // 마커 이미지 url, 스프라이트 이미지를 씁니다
            imageSize = new daum.maps.Size(36, 37),  // 마커 이미지의 크기
            imgOptions =  {
                spriteSize : new daum.maps.Size(36, 691), // 스프라이트 이미지의 크기
                spriteOrigin : new daum.maps.Point(0, (idx*46)+10), // 스프라이트 이미지 중 사용할 영역의 좌상단 좌표
                offset: new daum.maps.Point(13, 37) // 마커 좌표에 일치시킬 이미지 내에서의 좌표
            },
            markerImage = new daum.maps.MarkerImage(imageSrc, imageSize, imgOptions),
                marker = new daum.maps.Marker({
                position: position, // 마커의 위치
                image: markerImage 
            });
    
        marker.setMap(map); // 지도 위에 마커를 표출합니다
        markers.push(marker);  // 배열에 생성된 마커를 추가합니다
    
        return marker;
    }
    
    // 지도 위에 표시되고 있는 마커를 모두 제거합니다
    function removeMarker() {
        for ( var i = 0; i < markers.length; i++ ) {
            markers[i].setMap(null);
        }   
        markers = [];
    }
    
    // 검색결과 목록 또는 마커를 클릭했을 때 호출되는 함수입니다
    // 인포윈도우에 장소명을 표시합니다
    function displayInfowindow(marker, title, location, location2) {
        
        var content = '<div style="padding:5px;z-index:1;width:200px;">' + title + '</div>';
        
        infowindow.setContent(content);
        infowindow.open(map, marker);
        removeable = true;
    }
    
    function getLocation(location, location2) {
        if (location) {
            document.getElementById("demo").value = location;
            displaylnglat(location);
        }
        else {
            document.getElementById("demo").value = location2;
            displaylnglat(location2);
        }
    }
    
    function displaylnglat(location) {
        var geocoder = new daum.maps.services.Geocoder();
                  
        // 주소로 좌표를 검색합니다
        geocoder.addressSearch(location, function(result) {
        
        // 정상적으로 검색이 완료됐으면 
        var coords = new daum.maps.LatLng(result[0].y, result[0].x);
        
        var lat = coords.getLat();
        var lng = coords.getLng();
        document.getElementById("demo_lat").value = lat;
        document.getElementById("demo_lng").value = lng;
        });
    }
      
</script>


      
   
  
  <br><br><br><br><br><br><br><br>

